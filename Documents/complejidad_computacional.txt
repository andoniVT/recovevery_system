La teoria de la complejidad computacional es la rama de la teoria de la computacion que estudia, de manera teorica, la complejidad inherente a la resolucion de un problema computable. Los recursos comunmente estudiados son el tiempo (mediante una aproximacion al numero y tipo de pasos de ejecucion de un algoritmo para resolver un problema) y el espacio (mediante una aproximacion a la cantidad de memoria utilizada para resolver un problema). Se pueden estudiar igualmente otros parametros, tales como el numero de procesadores necesarios para resolver el problema en paralelo. La teoria de la complejidad difiere de la teoria de la computabilidad en que esta se ocupa de la factibilidad de expresar problemas como algoritmos efectivos sin tomar en cuenta los recursos necesarios para ello.
Los problemas que tienen una solucion con orden de complejidad lineal son los problemas que se resuelven en un tiempo que se relaciona linealmente con su tamano.
Hoy en dia las computadoras resuelven problemas mediante algoritmos que tienen como maximo una complejidad o coste computacional polinomico, es decir, la relacion entre el tamano del problema y su tiempo de ejecucion es polinomica. Estos son problemas agrupados en la clase P. Los problemas que no pueden ser resueltos por nuestras computadoras (las cuales son Maquinas Deterministicas), que en general poseen costes factorial o combinatorio pero que podrian ser procesados por una maquina no determinista, estan agrupados en la clase NP. Estos problemas no tienen una solucion practica, es decir, una maquina deterministica (como una computadora actual) no puede resolverlos en un tiempo razonable.
Un problema dado puede verse como un conjunto de preguntas relacionadas, donde cada pregunta se representa por una cadena de caracteres de tamano finito. Por ejemplo, el problema factorizacion entera se describe como: Dado un entero escrito en notacion binaria, retornar todos los factores primos de ese numero. Una pregunta sobre un entero especifico se llama una instancia. por ejemplo, "Encontrar los factores primos del numero 15" es una instancia del problema factorizacion entera.
La complejidad temporal de un problema es el numero de pasos que toma resolver una instancia de un problema, a partir del tamano de la entrada utilizando el algoritmo mas eficiente a disposicion. Intuitivamente, si se toma una instancia con entrada de longitud n que puede resolverse en n² pasos, se dice que ese problema tiene una complejidad en tiempo de n². Por supuesto, el numero exacto de pasos depende de la maquina en la que se implementa, del lenguaje utilizado y de otros factores. Para no tener que hablar del costo exacto de un calculo se utiliza la notacion O. Cuando un problema tiene costo en tiempo O(n²) en una configuracion de computador y lenguaje dado, este costo sera el mismo en todos los computadores, de manera que esta notacion generaliza la nocion de coste independientemente del equipo utilizado.
