Un arbol rojo negro es un tipo abstracto de datos, concretamente es un arbol binario de busqueda equilibrado, una estructura de datos utilizada en informatica y ciencias de la computacion. La estructura original fue creada por Rudolf Bayer en 1972, que le dio el nombre de “arboles B binarios simetricos”, pero tomo su nombre moderno en un trabajo de Leo J. Guibas y Robert Sedgewick realizado en 1978. Es complejo, pero tiene un buen peor caso de tiempo de ejecucion para sus operaciones y es eficiente en la practica. Puede buscar, insertar y borrar en un tiempo O(log n), donde n es el numero de elementos del arbol.
Seria ideal exponer la especificacion algebraica completa de este tipo abstracto de datos (TAD) escrita en algun lenguaje de especificacion de TADs como podria ser Maude; sin embargo, la complejidad de la estructura hace que la especificacion quede bastante ilegible, y no aportaria nada. Por tanto, explicaremos su funcionamiento con palabras, esquemas e implementaciones de funciones en el lenguaje de programacion C.
Un arbol rojo negro es un tipo especial de arbol binario usado en informatica para organizar informacion compuesta por datos comparables (como por ejemplo numeros).
En los arboles rojo negro las hojas no son relevantes y no contienen datos. A la hora de implementarlo en un lenguaje de programacion, para ahorrar memoria, un unico nodo (nodo centinela) hace de nodo hoja para todas las ramas. Asi,todas las referencias de los nodos internos a las hojas van a parar al nodo centinela.
En los arboles rojo negro, como en todos los arboles binarios de busqueda, es posible moverse ordenadamente a traves de los elementos de forma eficiente si hay forma de localizar el padre de cualquier nodo. El tiempo de desplazarse desde la raiz hasta una hoja a traves de un arbol equilibrado que tiene la minima altura posible es de O(log n).
